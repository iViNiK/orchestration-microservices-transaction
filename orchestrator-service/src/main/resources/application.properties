#Base
server.port=8761
server.servlet.context-path=/v1/orchestrator
spring.application.name=orchestrator-service

#Application
application.outbox.polling.cron=*/5 * * * * *

#Profiles
spring.profiles.active=dev

#Logging
logging.level.org.springframework.web: DEBUG
logging.level.it.vinicioflamini.omt.orchestrator: INFO

#Database
spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.url=jdbc:h2:file:/data/demo
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
# http://localhost:8761/v1/orders/h2-console
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

spring.jpa.hibernate.ddl-auto=create

#Consuming Saga events
spring.cloud.stream.bindings.order-in.destination=order-Topic
spring.cloud.stream.bindings.order-in.content-type=application/json
spring.cloud.stream.bindings.order-in.group=orchestrator

spring.cloud.stream.bindings.inventory-in.destination=inventory-Topic
spring.cloud.stream.bindings.inventory-in.content-type=application/json
spring.cloud.stream.bindings.inventory-in.group=orchestrator

spring.cloud.stream.bindings.payment-in.destination=payment-Topic
spring.cloud.stream.bindings.payment-in.content-type=application/json
spring.cloud.stream.bindings.payment-in.group=orchestrator

spring.cloud.stream.bindings.shipping-in.destination=shipping-Topic
spring.cloud.stream.bindings.shipping-in.content-type=application/json
spring.cloud.stream.bindings.shipping-in.group=orchestrator

#Producing Fallback events
spring.cloud.stream.bindings.order-out.destination=order-Topic
spring.cloud.stream.bindings.order-out.content-type=application/json

spring.cloud.stream.bindings.inventory-out.destination=inventory-Topic
spring.cloud.stream.bindings.inventory-out.content-type=application/json

spring.cloud.stream.bindings.payment-out.destination=payment-Topic
spring.cloud.stream.bindings.payment-out.content-type=application/json

spring.cloud.stream.bindings.shipping-out.destination=shipping-Topic
spring.cloud.stream.bindings.shipping-out.content-type=application/json

#Kafka Server/Cluster
spring.cloud.stream.kafka.binder.brokers=localhost:9092

## Enabled Hystrix console at: http://localhost:8761/v1/orchestrator/hystrix 
## In the "stream" inputbox, insert the following URL: http://localhost:8761/v1/orchestrator/actuator/hystrix.stream	
management.endpoints.web.exposure.include=hystrix.stream

#Rest client
feign.hystrix.enabled=true

#Hystrix command executes on the calling thread and concurrent requests are limited by the semaphore count 
hystrix.command.default.execution.isolation.strategy=SEMAPHORE
#Time in milliseconds after which the caller will observe a timeout and Hystrix performs fallback logic 
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000 
#Determines whether a call to the fallback logic will be attempted when failure or rejection occurs
hystrix.command.default.fallback.enabled=true
#Sets the duration of the statistical rolling window, in milliseconds
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=30000
#Determines whether a circuit breaker will be used to track health and to short-circuit requests to fallback logic if it trips
hystrix.command.default.circuitBreaker.enabled=true
#Sets the minimum number of requests in a rolling window that will trip the circuit
hystrix.command.default.circuitBreaker.requestVolumeThreshold=4
#Sets the error percentage at or above which the circuit should trip open and start short-circuiting requests to fallback logic
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
#Sets the amount of time, after tripping the circuit, to reject requests before allowing attempts again to determine if the circuit should again be closed 
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=60000

#Services endpoints
order.service.endpoint=http://localhost:8891/v1/orders/
inventory.service.endpoint=http://localhost:8894/v1/item/
payment.service.endpoint=http://localhost:8893/v1/payment/
shipment.service.endpoint=http://localhost:8895/v1/shipping/
